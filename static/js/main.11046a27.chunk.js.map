{"version":3,"sources":["box.ts","plane.ts","popup.tsx","three-scene.tsx","initialize.ts","index.tsx"],"names":["Box","boxSize","originalBox","geometry","THREE","material","color","shininess","flatShading","counter","name","this","vector","position","set","x","y","z","Plane","width","height","originalPlane","rotateX","rotateY","rotateZ","Popup","props","nameEnter","bind","sizeEnter","colorEnter","document","querySelector","style","display","e","key","box","target","value","sizeVec","computeBoundingBox","boundingBox","getSize","oldSize","scaleValue","parseInt","scale","className","top","left","id","onClick","exit","textAlign","htmlFor","type","onKeyDown","getHexString","Component","ThreeScene","BOX_SIZE","mount","state","x2D","y2D","x3D","y3D","z3D","setWindowListeners","onMouseClick","scene","background","fog","pointLight","add","ambientLight","initScene","renderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","setClearColor","intitRenderer","appendChild","domElement","camera","initCamera","controls","OrbitControls","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","initControls","plane","setPosition","rotate","getOriginalPlane","i","angle","cos","sin","getOriginalBox","animate","thisObject","requestAnimationFrame","update","canvas","project","round","setState","render","addEventListener","aspect","updateProjectionMatrix","getElementById","reset","event","raycaster","mouse","MouseEvent","clientX","clientY","setFromCamera","touches","intersects","intersectObjects","children","length","mesh","object","popup","includes","position3D","point","ref","ReactDOM","StrictMode"],"mappings":"+QAEaA,EAAb,WAII,WAAYC,GAAkB,yBAFtBC,iBAEqB,EACzB,IAAMC,EAAW,IAAIC,IAAkBH,EAASA,EAASA,GACnDI,EAAW,IAAID,IAAwB,CAAGE,MAAO,QACPC,UAAW,GACXC,aAAa,IAE7DR,EAAIS,SAAW,EACfN,EAASO,KAAT,aAAsBV,EAAIS,SAE1BE,KAAKT,YAAc,IAAIE,IAAWD,EAAUE,GAbpD,wDAgBgBO,GACRD,KAAKT,YAAYW,SAASC,IAAIF,EAAOG,EAAGH,EAAOI,EAAGJ,EAAOK,KAjBjE,qCAqBQ,OAAON,KAAKT,gBArBpB,KAAaF,EACMS,QAAU,ECDtB,IAAMS,EAAb,WAGI,aAEuC,IAFnBC,EAEkB,uDAFV,IACRC,EACkB,uDADT,IACTd,EAAkB,uDAAV,SAAU,yBAFlBa,QAEkB,KADlBC,SACkB,KAAlBd,QAAkB,KAJ9Be,mBAI8B,EAClC,IAAMlB,EAAW,IAAIC,IAA0BO,KAAKQ,MAAOR,KAAKS,QAC1Df,EAAW,IAAID,IAAwB,CAACE,MAAOK,KAAKL,QAE1DK,KAAKU,cAAgB,IAAIjB,IAAWD,EAAUE,GATtD,0DAYsC,IAAtBU,EAAqB,uDAAjB,EAAGC,EAAc,uDAAV,EAAGC,EAAO,uDAAH,EAC1BN,KAAKU,cAAcR,SAASC,IAAIC,EAAGC,EAAGC,KAb9C,+BAgBiC,IAAtBF,EAAqB,uDAAjB,EAAGC,EAAc,uDAAV,EAAGC,EAAO,uDAAH,EACrBN,KAAKU,cAAcC,QAAQP,GAC3BJ,KAAKU,cAAcE,QAAQP,GAC3BL,KAAKU,cAAcG,QAAQP,KAnBnC,uCAuBQ,OAAON,KAAKU,kBAvBpB,KC8FeI,G,wDAnFX,WAAYC,GAAmB,IAAD,8BAC1B,cAAMA,IAEDC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBALQ,E,mDASZG,SAASC,cAAc,UAC/BC,MAAMC,QAAU,S,gCAGhBC,GACQ,UAAVA,EAAEC,MACFzB,KAAKe,MAAMW,IAAIlC,SAASO,KAAQyB,EAAEG,OAA4BC,MAE7DJ,EAAEG,OAA4BC,MAAQ,M,gCAIrCJ,GACN,GAAc,UAAVA,EAAEC,IAAiB,CAAC,IAAD,EACfI,EAAU,IAAIpC,IAAc,EAAG,EAAG,GACtCO,KAAKe,MAAMW,IAAIlC,SAASsC,qBACxB,UAAA9B,KAAKe,MAAMW,IAAIlC,SAASuC,mBAAxB,SAAqCC,QAAQH,GAE7C,IAAMI,EAAUJ,EAAQzB,EAGlB8B,EAFkBC,SAAUX,EAAEG,OAA4BC,OAErCK,EAE3BjC,KAAKe,MAAMW,IAAIU,MAAMhC,EAAI8B,EACzBlC,KAAKe,MAAMW,IAAIU,MAAM/B,EAAI6B,EACzBlC,KAAKe,MAAMW,IAAIU,MAAM9B,EAAI4B,EAExBV,EAAEG,OAA4BC,MAAQ,M,iCAIpCJ,GACO,UAAVA,EAAEC,MACDzB,KAAKe,MAAMW,IAAIhC,SAAqCC,MAAQ,IAAIF,IAAa+B,EAAEG,OAA4BC,OAC3GJ,EAAEG,OAA4BC,MAAQ,M,+BAIrC,IAAD,EACDC,EAAU,IAAIpC,IAAc,EAAG,EAAG,GACtCO,KAAKe,MAAMW,IAAIlC,SAASsC,qBACxB,UAAA9B,KAAKe,MAAMW,IAAIlC,SAASuC,mBAAxB,SAAqCC,QAAQH,GAE7C,IAAIlC,EAASK,KAAKe,MAAMW,IAAIhC,SAAqCC,MAEjE,OAAQ,sBAAK0C,UAAU,QAAQf,MAAO,CAACgB,IAAKtC,KAAKe,MAAMV,EAAGkC,KAAMvC,KAAKe,MAAMX,GAAnE,UACI,sBAAMoC,GAAG,QAAQC,QAASzC,KAAK0C,KAA/B,eAEA,mBAAGpB,MAAO,CAACqB,UAAW,UAAtB,SAAiC,4CAEjC,wBAAOC,QAAQ,OAAf,mBACW5C,KAAKe,MAAMW,IAAIlC,SAASO,KAC/B,uBAFJ,qBAKA,uBAAOyC,GAAG,OAAOzC,KAAK,OAAO8C,KAAK,OAAOC,UAAW9C,KAAKgB,YAEzD,wBAAO4B,QAAQ,OAAf,mBACWf,EAAQzB,EACf,uBAFJ,qBAKA,uBAAOoC,GAAG,OAAOzC,KAAK,OAAO8C,KAAK,SAASC,UAAW9C,KAAKkB,YAE3D,wBAAO0B,QAAQ,QAAf,oBACYjD,EAAMoD,eACd,uBAFJ,sBAKA,uBAAOP,GAAG,QAAQ7C,MAAM,OAAOkD,KAAK,OAAOC,UAAW9C,KAAKmB,oB,GAhF3D6B,c,UCqLLC,E,kDAzKb,WAAYlC,GAAgB,IAAD,8BACzB,cAAMA,IAJSmC,SAAW,GAGD,EAFnBC,MAA+B,KAKrC,EAAKC,MAAQ,CACXC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,EACL/B,IAAK,IAAIjC,KAGX,EAAKiE,mBAAqB,EAAKA,mBAAmBzC,KAAxB,gBAC1B,EAAK0C,aAAe,EAAKA,aAAa1C,KAAlB,gBAbK,E,gEAkBxB,IAAM2C,EAAQ,IAAInE,KCtChB,SAAmBmE,GACtBA,EAAMC,WAAa,IAAIpE,IAAY,UACnCmE,EAAME,IAAM,IAAIrE,IAAc,SAAU,MAGxC,IAAMsE,EAAa,IAAItE,IAAiB,SAAU,EAAG,GACrDsE,EAAW7D,SAASC,IAAI,EAAG,IAAM,GACjCyD,EAAMI,IAAID,GAEV,IAAME,EAAe,IAAIxE,IAAmB,SAAU,GACtDwE,EAAa/D,SAASC,IAAI,IAAM,IAAM,KACtCyD,EAAMI,IAAIC,GD4BTC,CAAUN,GAGV,IAAMO,EAAW,IAAI1E,IAAoB,CAAE2E,WAAW,KC5BpD,SAAuBD,GAC1BA,EAASE,cAAcC,OAAOC,kBAC9BJ,EAASK,QAAQF,OAAOG,WAAYH,OAAOI,aAC3CP,EAASQ,cAAc,SAAU,GD0BhCC,CAAcT,GACdnE,KAAKmD,MAAO0B,YAAYV,EAASW,YAGjC,IAAMC,EAAS,IAAItF,IAAwB,GAAI6E,OAAOG,WAAWH,OAAOI,YAAa,EAAG,MC3BtF,SAAoBK,GACvBA,EAAO7E,SAASC,IAAI,IAAK,IAAK,GD2B7B6E,CAAWD,GAGX,IAAME,EAAW,IAAIC,IAAcH,EAAQZ,EAASW,aC3BlD,SAAsBG,GACzBA,EAASE,eAAgB,EACzBF,EAASG,cAAgB,GACzBH,EAASI,oBAAqB,EAC9BJ,EAASK,YAAc,IACvBL,EAASM,YAAc,IACvBN,EAASO,cAAgBC,KAAKC,GAAK,EDsBlCC,CAAaV,GAGd,IAAMW,EAAQ,IAAIrF,EAClBqF,EAAMC,YAAY,GAAI7F,KAAKkD,SAAS,EAAG,GACvC0C,EAAME,QAAQL,KAAKC,GAAK,GACxB9B,EAAMI,IAAI4B,EAAMG,kBAGhB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAM,CAC3B,IAAMtE,EAAM,IAAIrC,EAAIW,KAAKkD,UAEnB+C,EAAmB,EAAVR,KAAKC,GAAS,EAAKM,EAElCtE,EAAImE,YAAY,IAAIpG,IADV,IAC4BgG,KAAKS,IAAID,GAAQ,EAD7C,IACoDR,KAAKU,IAAIF,KAEvErC,EAAMI,IAAItC,EAAI0E,gBA4BhBpG,KAAK0D,mBAAmBqB,EAAQZ,EAAUP,EAAOqB,GAzBjD,SAASoB,EAAQC,GAMf,GALAC,uBAAsB,WAAYF,EAAQC,MAE1CrB,EAASuB,SAGmB,UADdpF,SAASC,cAAc,UAC3BC,MAAMC,QAAqB,CACnC,IAAMkF,EAAStC,EAASW,WAClB7E,EAAS,IAAIR,IAAc6G,EAAWlD,MAAMG,IAAK+C,EAAWlD,MAAMI,IAAK8C,EAAWlD,MAAMK,KAE9FxD,EAAOyG,QAAQ3B,GAEf9E,EAAOG,EAAIqF,KAAKkB,OAAO,GAAM1G,EAAOG,EAAI,IAAMqG,EAAOjG,MAAQ8D,OAAOC,mBACpEtE,EAAOI,EAAIoF,KAAKkB,OAAO,GAAM1G,EAAOI,EAAI,IAAMoG,EAAOhG,OAAS6D,OAAOC,mBAErE+B,EAAWM,UAAS,iBAAO,CACzBvD,IAAKpD,EAAOG,EACZkD,IAAKrD,EAAOI,MAKd8D,EAAS0C,OAAOjD,EAAOmB,GAI3BsB,CAAQrG,Q,yCAGS+E,EAAiCZ,EACjCP,EAAoBqB,GAA0B,IAAD,OAQ9DX,OAAOwC,iBAAiB,UAPD,WACrB/B,EAAOgC,OAASzC,OAAOG,WAAaH,OAAOI,YAC3CK,EAAOiC,yBAEP7C,EAASK,QAAQF,OAAOG,WAAYH,OAAOI,gBAGK,GAElDtD,SAAS6F,eAAe,YAAaH,iBAAiB,SAAS,WAC7D7B,EAASiC,QACTnC,EAAO7E,SAASC,IAAI,IAAK,IAAK,MAGhC,IAAMsG,EAAStC,EAASW,WACxB2B,EAAOK,iBAAiB,SAAS,SAACK,GAAY,EAAKxD,aAAawD,EAAOpC,EAAQnB,EAAOO,MAAY,GAClGsC,EAAOK,iBAAiB,cAAc,SAACK,GAAY,EAAKxD,aAAawD,EAAOpC,EAAQnB,EAAOO,MAAY,K,mCAG5FgD,EAAgCpC,EAChCnB,EAAoBO,GAC/B,IAAMiD,EAAY,IAAI3H,IAChB4H,EAAQ,IAAI5H,IAEZgH,EAAStC,EAASW,WAGpBqC,aAAiBG,YACnBD,EAAMjH,EAAK+G,EAAMI,QAAUd,EAAOjG,MAAS,EAAI,EAC/C6G,EAAMhH,GAAO8G,EAAMK,QAAUf,EAAOhG,OAAU,EAAI,EAElD2G,EAAUK,cAAcJ,EAAOtC,GAE/BsC,EAAMjH,EAAIqF,KAAKkB,OAAO,GAAMU,EAAMjH,EAAI,IAAMqG,EAAOjG,MAAQ8D,OAAOC,mBAClE8C,EAAMhH,EAAIoF,KAAKkB,OAAO,GAAMU,EAAMhH,EAAI,IAAMoG,EAAOhG,OAAS6D,OAAOC,qBAEnE8C,EAAMjH,EAAM+G,EAAqBO,QAAQ,GAAGH,QAAUjD,OAAOG,WAAc,EAAI,EAC/E4C,EAAMhH,GAAQ8G,EAAqBO,QAAQ,GAAGF,QAAUlD,OAAOI,YAAe,EAAI,EAElF0C,EAAUK,cAAcJ,EAAOtC,GAE/BsC,EAAMjH,EAAIqF,KAAKkB,OAAO,GAAMU,EAAMjH,EAAI,IAAMkE,OAAOG,WAAaH,OAAOC,mBACvE8C,EAAMhH,EAAIoF,KAAKkB,OAAO,GAAMU,EAAMhH,EAAI,IAAMiE,OAAOI,YAAcJ,OAAOC,oBAG1E,IAAMoD,EAAaP,EAAUQ,iBAAiBhE,EAAMiE,UAEpD,GAAIF,EAAWG,OAAS,EAAG,CACzB,IAAMC,EAAOJ,EAAW,GAAGK,OACrBC,EAAQ7G,SAASC,cAAc,UAErC,GAAI0G,EAAKvI,SAASqD,KAAKqF,SAAS,QAAkC,SAAxBD,EAAM3G,MAAMC,QACtD,CACE,IAAM4G,EAAaR,EAAW,GAAGS,MAEjCpI,KAAK4G,UAAS,iBAAO,CACnBvD,IAAKgE,EAAMjH,EACXkD,IAAK+D,EAAMhH,EACXkD,IAAK4E,EAAW/H,EAChBoD,IAAK2E,EAAW9H,EAChBoD,IAAK0E,EAAW7H,EAChBoB,IAAKqG,MAGPE,EAAM3G,MAAMC,QAAU,aAEtB0G,EAAM3G,MAAMC,QAAU,U,+BAKlB,IAAD,OACDR,EAAQ,CACZX,EAAGJ,KAAKoD,MAAMC,IACdhD,EAAGL,KAAKoD,MAAME,IACd5B,IAAK1B,KAAKoD,MAAM1B,KAGlB,OAAQ,8BACE,sBAAK2G,IAAK,SAAAA,GAAG,OAAK,EAAKlF,MAAQkF,GAAM7F,GAAG,QAAxC,UACE,wBAAQA,GAAG,WAAX,yBACA,cAAC,EAAD,eAAWzB,a,GAvKFiC,aEbzBsF,IAASzB,OACP,cAAC,IAAM0B,WAAP,UACE,cAAC,EAAD,MAEFnH,SAAS6F,eAAe,W","file":"static/js/main.11046a27.chunk.js","sourcesContent":["import * as THREE from \"three\";\n\nexport class Box {\n    private static counter = 0;\n    private originalBox: THREE.Mesh;\n\n    constructor(boxSize: number) {\n        const geometry = new THREE.BoxGeometry(boxSize, boxSize, boxSize);\n        const material = new THREE.MeshPhongMaterial({  color: 0x156289,\n                                                        shininess: 50,\n                                                        flatShading: true \n                                                    });\n        Box.counter += 1;\n        geometry.name = `Box${Box.counter}`;\n\n        this.originalBox = new THREE.Mesh(geometry, material);\n    }\n\n    setPosition(vector: THREE.Vector3) {\n        this.originalBox.position.set(vector.x, vector.y, vector.z);\n    }\n\n    get getOriginalBox() {\n        return this.originalBox;\n    }\n}","import * as THREE from \"three\";\n\nexport class Plane {\n    private originalPlane: THREE.Mesh;\n\n    constructor(private width = 2000,\n                private height = 2000,\n                private color = 0xffff00) {\n        const geometry = new THREE.PlaneBufferGeometry(this.width, this.height);\n        const material = new THREE.MeshBasicMaterial({color: this.color});\n\n        this.originalPlane = new THREE.Mesh(geometry, material);\n    }\n\n    setPosition(x = 0, y = 0, z = 0) {\n        this.originalPlane.position.set(x, y, z);\n    }\n\n    rotate(x = 0, y = 0, z = 0) {\n        this.originalPlane.rotateX(x);\n        this.originalPlane.rotateY(y);\n        this.originalPlane.rotateZ(z);\n    }\n\n    get getOriginalPlane() {\n        return this.originalPlane;\n    }\n}","import { Component } from \"react\";\nimport * as THREE from \"three\";\n\nimport './popup.css';\n\ntype PopupProp = {\n    x: number,\n    y: number,\n    box: THREE.Mesh\n}\n\nclass Popup extends Component<PopupProp, {}>{\n\n    constructor(props: PopupProp) {\n        super(props);\n\n        this.nameEnter = this.nameEnter.bind(this);\n        this.sizeEnter = this.sizeEnter.bind(this);\n        this.colorEnter = this.colorEnter.bind(this);\n    }\n\n    exit() {\n        const popup = document.querySelector('.popup') as HTMLDivElement;\n        popup.style.display = 'none';\n    }\n\n    nameEnter(e: React.KeyboardEvent<HTMLInputElement>) {\n        if (e.key === 'Enter') {\n            this.props.box.geometry.name = (e.target as HTMLInputElement).value;\n\n            (e.target as HTMLInputElement).value = '';\n        }\n    }\n\n    sizeEnter(e: React.KeyboardEvent<HTMLInputElement>) {\n        if (e.key === 'Enter') {\n            let sizeVec = new THREE.Vector3(0, 0, 0);\n            this.props.box.geometry.computeBoundingBox();\n            this.props.box.geometry.boundingBox?.getSize(sizeVec);\n\n            const oldSize = sizeVec.x;\n            const newSize: number = parseInt((e.target as HTMLInputElement).value);\n            \n            const scaleValue = newSize/oldSize;\n\n            this.props.box.scale.x = scaleValue;\n            this.props.box.scale.y = scaleValue;\n            this.props.box.scale.z = scaleValue;\n\n            (e.target as HTMLInputElement).value = '';\n        }\n    }\n\n    colorEnter(e: React.KeyboardEvent<HTMLInputElement>) {\n        if (e.key === 'Enter') {\n            (this.props.box.material as THREE.MeshPhongMaterial).color = new THREE.Color((e.target as HTMLInputElement).value);\n            (e.target as HTMLInputElement).value = '';\n        }\n    }\n\n    render() {\n        let sizeVec = new THREE.Vector3(0, 0, 0);\n        this.props.box.geometry.computeBoundingBox();\n        this.props.box.geometry.boundingBox?.getSize(sizeVec);\n\n        let color = (this.props.box.material as THREE.MeshPhongMaterial).color;\n\n        return  <div className=\"popup\" style={{top: this.props.y, left: this.props.x}}>\n                    <span id=\"close\" onClick={this.exit}>x</span>\n\n                    <p style={{textAlign: \"center\"}}><strong>Info</strong></p>\n\n                    <label htmlFor=\"name\">\n                        Name: {this.props.box.geometry.name}\n                        <br />\n                        Enter new name: \n                    </label>\n                    <input id=\"name\" name=\"name\" type=\"text\" onKeyDown={this.nameEnter}/>\n\n                    <label htmlFor=\"size\">\n                        Size: {sizeVec.x}\n                        <br />\n                        Enter new size: \n                    </label>\n                    <input id=\"size\" name=\"size\" type=\"number\" onKeyDown={this.sizeEnter}/>\n\n                    <label htmlFor=\"color\">\n                        Color: {color.getHexString()}\n                        <br />\n                        Enter new color: \n                    </label>\n                    <input id=\"color\" color=\"name\" type=\"text\" onKeyDown={this.colorEnter}/>\n                </div>;\n    }\n}\n\nexport default Popup;","import { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"\n\nimport { Box } from \"./box\";\nimport { Plane } from \"./plane\";\nimport Popup from \"./popup\";\nimport { initCamera, initControls, initScene, intitRenderer } from \"./initialize\";\nimport './three-scene.css';\n\ntype sceneState = {\n  x2D: number,\n  y2D: number,\n  x3D: number,\n  y3D: number,\n  z3D: number,\n  box: THREE.Mesh\n}\n\nclass ThreeScene extends Component<{}, sceneState > {\n  private readonly BOX_SIZE = 70;\n  private mount: HTMLDivElement | null = null;\n\n  constructor(props: Object) {\n    super(props);\n\n    this.state = {\n      x2D: 0,\n      y2D: 0,\n      x3D: 0,\n      y3D: 0,\n      z3D: 0,\n      box: new THREE.Mesh()\n    };\n\n    this.setWindowListeners = this.setWindowListeners.bind(this);\n    this.onMouseClick = this.onMouseClick.bind(this);\n  }\n\n  componentDidMount() {\n     // Create a Scene\n     const scene = new THREE.Scene();\n     initScene(scene);\n \n     // Create Renderer\n     const renderer = new THREE.WebGLRenderer({ antialias: true });\n     intitRenderer(renderer);\n     this.mount!.appendChild(renderer.domElement);\n \n     // Create Camera\n     const camera = new THREE.PerspectiveCamera(60, window.innerWidth/window.innerHeight, 1, 1000);\n     initCamera(camera);\n \n     // Initialize Camera controls\n     const controls = new OrbitControls(camera, renderer.domElement);\n     initControls(controls);\n    \n    // Add floor to the Scene\n    const plane = new Plane();\n    plane.setPosition(0, -this.BOX_SIZE/2, 0);\n    plane.rotate(-Math.PI / 2);\n    scene.add(plane.getOriginalPlane);\n\n    // Draw three main cubes\n    for (let i = 0; i < 3; i ++) {\n      const box = new Box(this.BOX_SIZE);\n\n      const angle = (Math.PI * 2 / 3) * i;\n      const r = 150;\n      box.setPosition(new THREE.Vector3(r * Math.cos(angle), 0, r * Math.sin(angle)));\n\n      scene.add(box.getOriginalBox);\n    }\n\n    function animate(thisObject: ThreeScene) {\n      requestAnimationFrame(function() {animate(thisObject);});\n  \n      controls.update();\n\n      const popup = document.querySelector('.popup') as HTMLDivElement;\n      if (popup.style.display === 'block') {\n        const canvas = renderer.domElement; \n        const vector = new THREE.Vector3(thisObject.state.x3D, thisObject.state.y3D, thisObject.state.z3D);\n        \n        vector.project(camera);\n\n        vector.x = Math.round((0.5 + vector.x / 2) * (canvas.width / window.devicePixelRatio));\n        vector.y = Math.round((0.5 - vector.y / 2) * (canvas.height / window.devicePixelRatio));\n\n        thisObject.setState(() => ({\n          x2D: vector.x,\n          y2D: vector.y\n        }));\n        \n      }\n\n        renderer.render(scene, camera);\n    };\n\n    this.setWindowListeners(camera, renderer, scene, controls);\n    animate(this);\n  }\n\n  setWindowListeners(camera: THREE.PerspectiveCamera, renderer: THREE.WebGLRenderer,\n                     scene: THREE.Scene, controls: OrbitControls) {\n    const onWindowResize = function () {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n  \n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    window.addEventListener('resize', onWindowResize, false);\n\n    document.getElementById(\"resetBtn\")!.addEventListener('click', () => {\n      controls.reset();\n      camera.position.set(400, 300, 0);\n    });\n\n    const canvas = renderer.domElement; \n    canvas.addEventListener('click', (event) => { this.onMouseClick(event, camera, scene, renderer)}, false);\n    canvas.addEventListener('touchstart', (event) => { this.onMouseClick(event, camera, scene, renderer)}, false);\n  }\n\n  onMouseClick(event: MouseEvent | TouchEvent, camera: THREE.PerspectiveCamera, \n               scene: THREE.Scene, renderer: THREE.WebGLRenderer) {\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n\n    const canvas = renderer.domElement; \n\n    // map to (-1, 1) interval\n    if (event instanceof MouseEvent) {\n      mouse.x = (event.clientX / canvas.width) * 2 - 1;\n      mouse.y = - (event.clientY / canvas.height) * 2 + 1;\n\n      raycaster.setFromCamera(mouse, camera);\n\n      mouse.x = Math.round((0.5 + mouse.x / 2) * (canvas.width / window.devicePixelRatio));\n      mouse.y = Math.round((0.5 - mouse.y / 2) * (canvas.height / window.devicePixelRatio));\n    } else {\n      mouse.x = ((event as TouchEvent).touches[0].clientX / window.innerWidth) * 2 - 1;\n      mouse.y = - ((event as TouchEvent).touches[0].clientY / window.innerHeight) * 2 + 1;\n\n      raycaster.setFromCamera(mouse, camera);\n\n      mouse.x = Math.round((0.5 + mouse.x / 2) * (window.innerWidth / window.devicePixelRatio));\n      mouse.y = Math.round((0.5 - mouse.y / 2) * (window.innerHeight / window.devicePixelRatio));\n    }\n    \n    const intersects = raycaster.intersectObjects(scene.children);\n  \n    if (intersects.length > 0) {\n      const mesh = intersects[0].object as THREE.Mesh;\n      const popup = document.querySelector('.popup') as HTMLDivElement;\n\n      if (mesh.geometry.type.includes('Box') && popup.style.display === 'none')\n      {\n        const position3D = intersects[0].point; \n        \n        this.setState(() => ({\n          x2D: mouse.x,\n          y2D: mouse.y,\n          x3D: position3D.x,\n          y3D: position3D.y,\n          z3D: position3D.z,\n          box: mesh\n        }));\n\n        popup.style.display = 'block';\n      } else {\n        popup.style.display = 'none';\n      }\n    }\n  }\n\n  render() {\n    const props = {\n      x: this.state.x2D,\n      y: this.state.y2D,\n      box: this.state.box\n    };\n\n    return  <div>\n              <div ref={ref => (this.mount = ref)} id=\"scene\">\n                <button id=\"resetBtn\">Reset scene</button>\n                <Popup {...props}/>\n              </div>\n            </div>;\n  }\n}\n\nexport default ThreeScene;\n","import * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nexport function initScene(scene: THREE.Scene) {\n    scene.background = new THREE.Color(0xcccccc);\n    scene.fog = new THREE.FogExp2(0xcccccc, 0.002);\n\n    // Scene Lighting\n    const pointLight = new THREE.PointLight(0xffffff, 1, 0);\n    pointLight.position.set(0, 1000, 0);\n    scene.add(pointLight);\n\n    const ambientLight = new THREE.AmbientLight(0xffffff, 1);    \n    ambientLight.position.set(1000, 1000, 1000);\n    scene.add(ambientLight);\n}\n\nexport function intitRenderer(renderer: THREE.WebGLRenderer) {\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0xcccccc, 1);\n}\n\nexport function initCamera(camera: THREE.PerspectiveCamera) {\n    camera.position.set(400, 300, 0);\n}\n\nexport function initControls(controls: OrbitControls) {\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.1;\n    controls.screenSpacePanning = false;\n    controls.minDistance = 100;\n    controls.maxDistance = 250;\n    controls.maxPolarAngle = Math.PI / 2;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport ThreeScene from './three-scene';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThreeScene />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}