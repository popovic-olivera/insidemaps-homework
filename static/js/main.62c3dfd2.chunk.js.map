{"version":3,"sources":["box.ts","plane.ts","popup.tsx","three-scene.tsx","initialize.ts","index.tsx"],"names":["Box","boxSize","originalBox","geometry","THREE","material","color","shininess","flatShading","counter","name","this","vector","position","set","x","y","z","BOX_SIZE","Plane","width","height","originalPlane","rotateX","rotateY","rotateZ","Popup","props","nameEnter","bind","sizeEnter","colorEnter","document","querySelector","style","display","e","key","box","target","value","forceUpdate","sizeVec","computeBoundingBox","boundingBox","getSize","oldSize","scaleValue","parseInt","scale","size","className","top","left","onClick","exit","id","htmlFor","type","onKeyDown","getHexString","Component","ThreeScene","mount","state","x2D","y2D","x3D","y3D","z3D","setWindowListeners","onMouseClick","scene","background","fog","pointLight","add","ambientLight","initScene","renderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","setClearColor","intitRenderer","appendChild","domElement","camera","initCamera","controls","OrbitControls","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","initControls","plane","setPosition","rotate","getOriginalPlane","i","angle","cos","sin","getOriginalBox","animate","thisObject","requestAnimationFrame","update","canvas","project","round","setState","render","addEventListener","aspect","updateProjectionMatrix","getElementsByClassName","reset","event","raycaster","mouse","MouseEvent","clientX","clientY","setFromCamera","touches","intersects","intersectObjects","children","popup","length","mesh","object","includes","position3D","point","ref","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.62c3dfd2.chunk.js","sourcesContent":["import * as THREE from 'three';\n\n/*\n*   Wrapper class for drawing boxes in THREE.js\n*/\n\nexport class Box {\n    public static readonly BOX_SIZE = 70;\n    private static counter = 0;\n    private originalBox: THREE.Mesh;\n\n    constructor(boxSize: number) {\n        const geometry = new THREE.BoxBufferGeometry(boxSize, boxSize, boxSize);\n        const material = new THREE.MeshPhongMaterial({  color: 0x156289,\n                                                        shininess: 50,\n                                                        flatShading: true \n                                                    });\n        Box.counter += 1;\n        geometry.name = `Box${Box.counter}`;\n\n        this.originalBox = new THREE.Mesh(geometry, material);\n    }\n\n    setPosition(vector: THREE.Vector3) {\n        this.originalBox.position.set(vector.x, vector.y, vector.z);\n    }\n\n    get getOriginalBox() {\n        return this.originalBox;\n    }\n}","import * as THREE from 'three';\n\n/*\n*   Wrapper class for drawing plane in THREE.js\n*/\n\nexport class Plane {\n    private originalPlane: THREE.Mesh;\n\n    constructor(private width = 2000,\n                private height = 2000,\n                private color = 0xffff00) {\n        const geometry = new THREE.PlaneBufferGeometry(this.width, this.height);\n        const material = new THREE.MeshBasicMaterial({color: this.color});\n\n        this.originalPlane = new THREE.Mesh(geometry, material);\n    }\n\n    setPosition(vector: THREE.Vector3) {\n        this.originalPlane.position.set(vector.x, vector.y, vector.z);\n    }\n\n    rotate(vector: THREE.Vector3) {\n        this.originalPlane.rotateX(vector.x);\n        this.originalPlane.rotateY(vector.y);\n        this.originalPlane.rotateZ(vector.z);\n    }\n\n    get getOriginalPlane() {\n        return this.originalPlane;\n    }\n}","import { Component } from 'react';\nimport * as THREE from 'three';\n\nimport './popup.css';\nimport { Box } from './box';\n\ntype PopupProp = {\n    x: number,\n    y: number,\n    box: THREE.Mesh\n}\n\nclass Popup extends Component<PopupProp, {}>{\n\n    constructor(props: PopupProp) {\n        super(props);\n\n        this.nameEnter = this.nameEnter.bind(this);\n        this.sizeEnter = this.sizeEnter.bind(this);\n        this.colorEnter = this.colorEnter.bind(this);\n    }\n\n    exit() {\n        const popup = document.querySelector('.popup') as HTMLDivElement;\n        popup.style.display = 'none';\n    }\n\n    nameEnter(e: React.KeyboardEvent<HTMLInputElement>) {\n        if (e.key === 'Enter') {\n            this.props.box.geometry.name = (e.target as HTMLInputElement).value;\n\n            (e.target as HTMLInputElement).value = '';\n            this.forceUpdate();\n        }\n    }\n\n    // TODO: check if this can be done easier\n    sizeEnter(e: React.KeyboardEvent<HTMLInputElement>) {\n        if (e.key === 'Enter') {\n            let sizeVec = new THREE.Vector3(0, 0, 0);\n            this.props.box.geometry.computeBoundingBox();\n            this.props.box.geometry.boundingBox?.getSize(sizeVec);\n\n            const oldSize = sizeVec.x;\n            const newSize: number = parseInt((e.target as HTMLInputElement).value);\n            \n            const scaleValue = newSize/oldSize;\n            \n            this.props.box.scale.x = scaleValue;\n            this.props.box.scale.y = scaleValue;\n            this.props.box.scale.z = scaleValue;\n\n            (e.target as HTMLInputElement).value = '';\n            this.forceUpdate();\n        }\n    }\n\n    colorEnter(e: React.KeyboardEvent<HTMLInputElement>) {\n        if (e.key === 'Enter') {\n            (this.props.box.material as THREE.MeshPhongMaterial).color = new THREE.Color((e.target as HTMLInputElement).value);\n            \n            (e.target as HTMLInputElement).value = '';\n        }\n    }\n\n    // TODO: Split into smaller components\n    render() {\n        let size = this.props.box.scale.x * Box.BOX_SIZE;\n\n        let color = (this.props.box.material as THREE.MeshPhongMaterial).color;\n\n        return  <div className='popup' style={{top: this.props.y, left: this.props.x}}>\n                    <span className='close' onClick={this.exit}>x</span>\n\n                    <p id='heading'><strong>Info</strong></p>\n\n                    <label htmlFor='name'>\n                        Name: {this.props.box.geometry.name}\n                        <br />\n                        Enter new name: \n                        <br />\n                    </label>\n                    <input id='name' name='name' type='text' onKeyDown={this.nameEnter}/>\n\n                    <label htmlFor='size'>\n                        Size: {size}\n                        <br />\n                        Enter new size: \n                        <br />\n                    </label>\n                    <input id='size' name='size' type='number' onKeyDown={this.sizeEnter}/>\n\n                    <label htmlFor='color'>\n                        Color: {color.getHexString()}\n                        <br />\n                        Enter new color: \n                        <br />\n                    </label>\n                    <input id='color' color='name' type='text' onKeyDown={this.colorEnter}/>\n                </div>;\n    }\n}\n\nexport default Popup;","import { Component } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\nimport { Box } from './box';\nimport { Plane } from './plane';\nimport Popup from './popup';\nimport { initCamera, initControls, initScene, intitRenderer } from './initialize';\nimport './three-scene.css';\n\ntype sceneState = {\n  x2D: number,\n  y2D: number,\n  x3D: number,\n  y3D: number,\n  z3D: number,\n  box: THREE.Mesh\n}\n\nclass ThreeScene extends Component<{}, sceneState > {\n  private mount: HTMLDivElement | null = null;\n\n  constructor(props: Object) {\n    super(props);\n\n    this.state = {\n      x2D: 0,\n      y2D: 0,\n      x3D: 0,\n      y3D: 0,\n      z3D: 0,\n      box: new THREE.Mesh()\n    };\n\n    this.setWindowListeners = this.setWindowListeners.bind(this);\n    this.onMouseClick = this.onMouseClick.bind(this);\n  }\n\n  componentDidMount() {\n     // Create a Scene\n     const scene = new THREE.Scene();\n     initScene(scene);\n \n     // Create Renderer\n     const renderer = new THREE.WebGLRenderer({ antialias: true });\n     intitRenderer(renderer);\n     this.mount!.appendChild(renderer.domElement);\n \n     // Create Camera\n     const camera = new THREE.PerspectiveCamera(60, window.innerWidth/window.innerHeight, 1, 1000);\n     initCamera(camera);\n \n     // Initialize Camera controls\n     const controls = new OrbitControls(camera, renderer.domElement);\n     initControls(controls);\n    \n    // Add floor to the Scene\n    const plane = new Plane();\n    plane.setPosition(new THREE.Vector3(0, -Box.BOX_SIZE/2, 0));\n    plane.rotate(new THREE.Vector3(-Math.PI / 2));\n    scene.add(plane.getOriginalPlane);\n\n    // Draw three main cubes\n    for (let i = 0; i < 3; i ++) {\n      const box = new Box(Box.BOX_SIZE);\n\n      const angle = (Math.PI * 2 / 3) * i;\n      const r = 150;\n      box.setPosition(new THREE.Vector3(r * Math.cos(angle), 0, r * Math.sin(angle)));\n\n      scene.add(box.getOriginalBox);\n    }\n\n    function animate(thisObject: ThreeScene) {\n      requestAnimationFrame(function() {animate(thisObject);});\n\n      controls.update();\n\n      const popup = document.querySelector('.popup') as HTMLDivElement;\n      if (popup.style.display === 'block') {\n        const canvas = renderer.domElement; \n        const vector = new THREE.Vector3(thisObject.state.x3D, thisObject.state.y3D, thisObject.state.z3D);\n\n        vector.project(camera);\n\n        vector.x = Math.round((0.5 + vector.x / 2) * (canvas.width / window.devicePixelRatio));\n        vector.y = Math.round((0.5 - vector.y / 2) * (canvas.height / window.devicePixelRatio));\n\n        thisObject.setState(() => ({\n          x2D: vector.x,\n          y2D: vector.y\n        }));\n\n      }\n\n        renderer.render(scene, camera);\n    };\n\n    // react on resize, click, touch, reset view button click\n    this.setWindowListeners(camera, renderer, scene, controls);\n\n    // Animation loop\n    animate(this);\n  }\n\n  setWindowListeners(camera: THREE.PerspectiveCamera, renderer: THREE.WebGLRenderer,\n                     scene: THREE.Scene, controls: OrbitControls) {\n                       \n    const onWindowResize = function () {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n  \n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    window.addEventListener('resize', onWindowResize, false);\n\n    document.getElementsByClassName('resetBtn')[0]!.addEventListener('click', () => {\n      controls.reset();\n      camera.position.set(400, 300, 0);\n    });\n\n    const canvas = renderer.domElement; \n    canvas.addEventListener('pointerdown', (event) => { this.onMouseClick(event, camera, scene, renderer)}, false);\n    canvas.addEventListener('mousedown', (event) => { this.onMouseClick(event, camera, scene, renderer)}, false);\n    canvas.addEventListener('touchstart', (event) => { this.onMouseClick(event, camera, scene, renderer)}, false);\n  }\n\n  onMouseClick(event: MouseEvent | TouchEvent, camera: THREE.PerspectiveCamera, \n               scene: THREE.Scene, renderer: THREE.WebGLRenderer) {\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n\n    const canvas = renderer.domElement; \n\n    // Get click point and map it to (-1, 1) interval\n    if (event instanceof MouseEvent) {\n      mouse.x = (event.clientX / canvas.width) * 2 - 1;\n      mouse.y = - (event.clientY / canvas.height) * 2 + 1;\n\n      raycaster.setFromCamera(mouse, camera);\n\n      mouse.x = Math.round((0.5 + mouse.x / 2) * (canvas.width / window.devicePixelRatio));\n      mouse.y = Math.round((0.5 - mouse.y / 2) * (canvas.height / window.devicePixelRatio));\n    } else {\n      mouse.x = ((event as TouchEvent).touches[0].clientX / window.innerWidth) * 2 - 1;\n      mouse.y = - ((event as TouchEvent).touches[0].clientY / window.innerHeight) * 2 + 1;\n\n      raycaster.setFromCamera(mouse, camera);\n\n      mouse.x = Math.round((0.5 + mouse.x / 2) * (window.innerWidth / window.devicePixelRatio));\n      mouse.y = Math.round((0.5 - mouse.y / 2) * (window.innerHeight / window.devicePixelRatio));\n    }\n    \n    const intersects = raycaster.intersectObjects(scene.children);\n  \n    // Check cursor interaction with objects\n    const popup = document.querySelector('.popup') as HTMLDivElement;\n    if (intersects.length > 0) {\n      const mesh = intersects[0].object as THREE.Mesh;\n\n      if (mesh.geometry.type.includes('Box') && popup.style.display === 'none')\n      {\n        const position3D = intersects[0].point; \n\n        this.setState(() => ({\n          x2D: mouse.x,\n          y2D: mouse.y,\n          x3D: position3D.x,\n          y3D: position3D.y,\n          z3D: position3D.z,\n          box: mesh\n        }));\n\n        popup.style.display = 'block';\n      } else {\n        popup.style.display = 'none';\n      }\n    } else {\n      popup.style.display = 'none';\n    }\n  }\n\n  render() {\n    const props = {\n      x: this.state.x2D,\n      y: this.state.y2D,\n      box: this.state.box\n    };\n\n    return  <div>\n              <div ref={ref => (this.mount = ref)} id='scene'>\n                <button className='resetBtn'>Reset view</button>\n                <Popup {...props}/>\n              </div>\n            </div>;\n  }\n}\n\nexport default ThreeScene;\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nexport function initScene(scene: THREE.Scene) {\n    scene.background = new THREE.Color(0xcccccc);\n    scene.fog = new THREE.FogExp2(0xcccccc, 0.002);\n\n    // Scene Lights\n    const pointLight = new THREE.PointLight(0xffffff, 1, 0);\n    pointLight.position.set(0, 1000, 0);\n    scene.add(pointLight);\n\n    const ambientLight = new THREE.AmbientLight(0xffffff, 1);    \n    ambientLight.position.set(1000, 1000, 1000);\n    scene.add(ambientLight);\n}\n\nexport function intitRenderer(renderer: THREE.WebGLRenderer) {\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0xcccccc, 1);\n}\n\nexport function initCamera(camera: THREE.PerspectiveCamera) {\n    camera.position.set(400, 300, 0);\n}\n\nexport function initControls(controls: OrbitControls) {\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.1;\n    controls.screenSpacePanning = false;\n    controls.minDistance = 100;\n    controls.maxDistance = 250;\n    controls.maxPolarAngle = Math.PI / 2;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport ThreeScene from './three-scene';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThreeScene />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}