{"version":3,"sources":["box.ts","plane.ts","popup.tsx","three-scene.tsx","initialize.ts","index.tsx"],"names":["Box","boxSize","originalBox","geometry","THREE","material","specular","color","emissive","shininess","flatShading","counter","name","this","x","y","z","position","set","Plane","width","height","originalPlane","rotateX","rotateY","rotateZ","Popup","document","querySelector","style","display","props","box","computeBoundingBox","sizeVec","boundingBox","getSize","className","top","left","id","onClick","exit","textAlign","htmlFor","value","onChange","nameChanged","disabled","getHexString","Component","ThreeScene","BOX_SIZE","mount","state","setWindowListeners","bind","onMouseClick","scene","background","fog","light","normalize","add","ambientLight","initScene","renderer","antialias","setSize","window","innerWidth","innerHeight","intitRenderer","appendChild","domElement","camera","initCamera","controls","OrbitControls","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","initControls","plane","setPosition","rotate","getOriginalPlane","i","angle","cos","sin","getOriginalBox","animate","requestAnimationFrame","update","render","addEventListener","aspect","updateProjectionMatrix","event","key","raycaster","mouse","canvas","clientX","clientY","setFromCamera","intersects","intersectObjects","children","length","mesh","object","popup","type","includes","round","devicePixelRatio","setState","ref","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3bb0e859.chunk.js","sourcesContent":["import * as THREE from \"three\";\n\nexport class Box {\n    private static counter = 0;\n    private originalBox: THREE.Mesh;\n\n    constructor(boxSize: number) {\n        const geometry = new THREE.BoxGeometry(boxSize, boxSize, boxSize);\n        const material = new THREE.MeshPhongMaterial({  specular: 0xD76531,\n                                                        color: 0xef8834,\n                                                        emissive: 0x8c2317,\n                                                        shininess: 50,\n                                                        flatShading: true \n                                                    });\n        Box.counter += 1;\n        geometry.name = `Box${Box.counter}`;\n\n        this.originalBox = new THREE.Mesh(geometry, material);\n    }\n\n    setPosition(x = 0, y = 0, z = 0) {\n        this.originalBox.position.set(x, y, z);\n    }\n\n    get getOriginalBox() {\n        return this.originalBox;\n    }\n}","import * as THREE from \"three\";\n\nexport class Plane {\n    private originalPlane: THREE.Mesh;\n\n    constructor(private width = 2000,\n                private height = 2000,\n                private color = 0xffff00) {\n        const geometry = new THREE.PlaneBufferGeometry(this.width, this.height);\n        const material = new THREE.MeshBasicMaterial({color: this.color});\n\n        this.originalPlane = new THREE.Mesh(geometry, material);\n    }\n\n    setPosition(x = 0, y = 0, z = 0) {\n        this.originalPlane.position.set(x, y, z);\n    }\n\n    rotate(x = 0, y = 0, z = 0) {\n        this.originalPlane.rotateX(x);\n        this.originalPlane.rotateY(y);\n        this.originalPlane.rotateZ(z);\n    }\n\n    get getOriginalPlane() {\n        return this.originalPlane;\n    }\n}","import { Component } from \"react\";\nimport * as THREE from \"three\";\n\nimport './popup.css';\n\ntype PopupProp = {\n    x: number,\n    y: number,\n    box: THREE.Mesh\n}\n\nclass Popup extends Component<PopupProp, {}>{\n    exit() {\n        const popup = document.querySelector('.popup') as HTMLDivElement;\n        popup.style.display = 'none';\n    }\n\n    nameChanged() {\n        \n    }\n\n    render() {\n        this.props.box.geometry.computeBoundingBox();\n        let sizeVec = new THREE.Vector3(0, 0, 0);\n        this.props.box.geometry.boundingBox?.getSize(sizeVec);\n        let color = (this.props.box.material as THREE.MeshPhongMaterial).color;\n\n        return  <div className=\"popup\" style={{top: this.props.y, left: this.props.x}}>\n                    <span id=\"close\" onClick={this.exit}>x</span>\n\n                    <p style={{textAlign: \"center\"}}><strong>Info</strong></p>\n\n                    <label htmlFor=\"name\">Name:</label>\n                    <input id=\"name\" name=\"name\" value={this.props.box.geometry.name} onChange={this.nameChanged}/>\n\n                    <label htmlFor=\"name\">Size:</label>\n                    <input id=\"size\" name=\"size\" value={sizeVec.x} disabled/>\n\n                    <label htmlFor=\"name\">Color:</label>\n                    <input id=\"color\" name=\"color\" value={color.getHexString()} disabled/>\n                </div>;\n    }\n}\n\nexport default Popup;","import { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"\n\nimport { Box } from \"./box\";\nimport { Plane } from \"./plane\";\nimport Popup from \"./popup\";\nimport { initCamera, initControls, initScene, intitRenderer } from \"./initialize\";\nimport './three-scene.css';\n\ntype sceneState = {\n  x: number,\n  y: number,\n  box: THREE.Mesh\n}\n\nclass ThreeScene extends Component<{}, sceneState > {\n  private readonly BOX_SIZE = 70;\n  private mount: HTMLDivElement | null = null;\n\n  constructor(props: Object) {\n    super(props);\n\n    this.state = {\n      x: 0,\n      y: 0,\n      box: new THREE.Mesh()\n    };\n\n    this.setWindowListeners = this.setWindowListeners.bind(this);\n    this.onMouseClick = this.onMouseClick.bind(this);\n  }\n\n  componentDidMount() {\n     // Create a Scene\n     const scene = new THREE.Scene();\n     initScene(scene);\n \n     // Create Renderer\n     const renderer = new THREE.WebGLRenderer({ antialias: true });\n     intitRenderer(renderer);\n     this.mount!.appendChild(renderer.domElement);\n \n     // Create Camera\n     const camera = new THREE.PerspectiveCamera(60, window.innerWidth/window.innerHeight, 1, 1000);\n     initCamera(camera);\n \n     // Initialize Camera controls\n     const controls = new OrbitControls(camera, renderer.domElement);\n     initControls(controls);\n    \n    // Add floor to the Scene\n    const plane = new Plane();\n    plane.setPosition(0, -this.BOX_SIZE/2, 0);\n    plane.rotate(-Math.PI / 2);\n    scene.add(plane.getOriginalPlane);\n\n    // Draw three main cubes\n    for (let i = 0; i < 3; i ++) {\n      const box = new Box(this.BOX_SIZE);\n\n      const angle = (Math.PI * 2 / 3) * i;\n      const r = 150;\n      box.setPosition(r * Math.cos(angle), 0, r * Math.sin(angle));\n\n      scene.add(box.getOriginalBox);\n    }\n\n    const animate = function () {\n      requestAnimationFrame(animate);\n  \n      controls.update();\n\n      renderer.render(scene, camera);\n    };\n\n    this.setWindowListeners(camera, renderer, scene);\n    animate();\n  }\n\n  setWindowListeners(camera: THREE.PerspectiveCamera, renderer: THREE.WebGLRenderer,\n                     scene: THREE.Scene) {\n    const onWindowResize = function () {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n  \n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    window.addEventListener('resize', onWindowResize, false);\n\n    window.addEventListener('keydown', event => {\n      if (event.key === 'r') {\n        camera.position.set(400, 100, 0);\n      }\n    });\n\n    const canvas = renderer.domElement; \n    canvas.addEventListener('click', (event) => { this.onMouseClick(event, camera, scene, renderer)}, false);\n  }\n\n  onMouseClick(event: any, camera: THREE.PerspectiveCamera, \n               scene: THREE.Scene, renderer: THREE.WebGLRenderer) {\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n\n    const canvas = renderer.domElement; \n\n    // map to (-1, 1) interval\n    mouse.x = (event.clientX / canvas.width) * 2 - 1;\n    mouse.y = - (event.clientY / canvas.height) * 2 + 1;\n\n    raycaster.setFromCamera(mouse, camera);\n    \n    const intersects = raycaster.intersectObjects(scene.children);\n  \n    if (intersects.length > 0) {\n      const mesh = intersects[0].object as THREE.Mesh;\n      const popup = document.querySelector('.popup') as HTMLDivElement;\n\n      if (mesh.geometry.type.includes('Box') && popup.style.display === 'none')\n      {\n        mouse.x = Math.round((0.5 + mouse.x / 2) * (canvas.width / window.devicePixelRatio));\n        mouse.y = Math.round((0.5 - mouse.y / 2) * (canvas.height / window.devicePixelRatio));\n        \n        this.setState(() => ({\n          x: mouse.x,\n          y: mouse.y,\n          box: mesh\n        }));\n\n        popup.style.display = 'block';\n      } else {\n        popup.style.display = 'none';\n      }\n    }\n  }\n\n  render() {\n    const props = {\n      x: this.state.x,\n      y: this.state.y,\n      box: this.state.box\n    };\n\n    return  <div>\n              <div ref={ref => (this.mount = ref)} id=\"scene\">\n                <Popup {...props}/>\n              </div>\n            </div>;\n  }\n}\n\nexport default ThreeScene;\n","import * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nexport function initScene(scene: THREE.Scene) {\n    scene.background = new THREE.Color(0xcccccc);\n    scene.fog = new THREE.FogExp2(0xcccccc, 0.002);\n\n    // Add Lighting\n    const light = new THREE.DirectionalLight(0xfdfdfd, 2);\n    light.position.set(400, 500, 0).normalize();\n    scene.add(light);\n\n    const ambientLight = new THREE.AmbientLight(0x000022);\n    scene.add(ambientLight);\n}\n\nexport function intitRenderer(renderer: THREE.WebGLRenderer) {\n    renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\nexport function initCamera(camera: THREE.PerspectiveCamera) {\n    camera.position.set(400, 100, 0);\n}\n\nexport function initControls(controls: OrbitControls) {\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.1;\n    controls.screenSpacePanning = false;\n    controls.minDistance = 100;\n    controls.maxDistance = 100;\n    controls.maxPolarAngle = Math.PI / 2;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport ThreeScene from './three-scene';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThreeScene />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}