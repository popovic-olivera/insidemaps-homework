{"version":3,"sources":["box.ts","plane.ts","popup.tsx","three-scene.tsx","initialize.ts","index.tsx"],"names":["Box","boxSize","originalBox","geometry","THREE","material","color","shininess","side","flatShading","counter","name","this","x","y","z","position","set","Plane","width","height","originalPlane","rotateX","rotateY","rotateZ","Popup","props","nameEnter","bind","sizeEnter","colorEnter","document","querySelector","style","display","e","key","box","target","value","sizeVec","computeBoundingBox","boundingBox","getSize","oldSize","scaleValue","parseInt","scale","className","top","left","id","onClick","exit","textAlign","htmlFor","type","onKeyDown","getHexString","Component","ThreeScene","BOX_SIZE","mount","state","x2D","y2D","x3D","y3D","z3D","setWindowListeners","onMouseClick","scene","background","fog","pointLight","ambientLight","add","initScene","renderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","setClearColor","intitRenderer","appendChild","domElement","camera","initCamera","controls","OrbitControls","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","initControls","plane","setPosition","rotate","getOriginalPlane","i","angle","cos","sin","getOriginalBox","animate","thisObject","requestAnimationFrame","update","canvas","vector","project","round","setState","render","addEventListener","aspect","updateProjectionMatrix","event","raycaster","mouse","MouseEvent","clientX","clientY","setFromCamera","touches","intersects","intersectObjects","children","length","mesh","object","popup","includes","position3D","point","ref","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d5b5d3ad.chunk.js","sourcesContent":["import * as THREE from \"three\";\n\nexport class Box {\n    private static counter = 0;\n    private originalBox: THREE.Mesh;\n\n    constructor(boxSize: number) {\n        const geometry = new THREE.BoxGeometry(boxSize, boxSize, boxSize);\n        const material = new THREE.MeshPhongMaterial({  color: 0x156289,\n                                                        shininess: 50,\n                                                        side: THREE.DoubleSide,\n                                                        flatShading: true \n                                                    });\n        Box.counter += 1;\n        geometry.name = `Box${Box.counter}`;\n\n        this.originalBox = new THREE.Mesh(geometry, material);\n    }\n\n    setPosition(x = 0, y = 0, z = 0) {\n        this.originalBox.position.set(x, y, z);\n    }\n\n    get getOriginalBox() {\n        return this.originalBox;\n    }\n}","import * as THREE from \"three\";\n\nexport class Plane {\n    private originalPlane: THREE.Mesh;\n\n    constructor(private width = 2000,\n                private height = 2000,\n                private color = 0xffff00) {\n        const geometry = new THREE.PlaneBufferGeometry(this.width, this.height);\n        const material = new THREE.MeshBasicMaterial({color: this.color});\n\n        this.originalPlane = new THREE.Mesh(geometry, material);\n    }\n\n    setPosition(x = 0, y = 0, z = 0) {\n        this.originalPlane.position.set(x, y, z);\n    }\n\n    rotate(x = 0, y = 0, z = 0) {\n        this.originalPlane.rotateX(x);\n        this.originalPlane.rotateY(y);\n        this.originalPlane.rotateZ(z);\n    }\n\n    get getOriginalPlane() {\n        return this.originalPlane;\n    }\n}","import { Component } from \"react\";\nimport * as THREE from \"three\";\n\nimport './popup.css';\n\ntype PopupProp = {\n    x: number,\n    y: number,\n    box: THREE.Mesh\n}\n\nclass Popup extends Component<PopupProp, {}>{\n\n    constructor(props: PopupProp) {\n        super(props);\n\n        this.nameEnter = this.nameEnter.bind(this);\n        this.sizeEnter = this.sizeEnter.bind(this);\n        this.colorEnter = this.colorEnter.bind(this);\n    }\n\n    exit() {\n        const popup = document.querySelector('.popup') as HTMLDivElement;\n        popup.style.display = 'none';\n    }\n\n    nameEnter(e: React.KeyboardEvent<HTMLInputElement>) {\n        if (e.key === 'Enter') {\n            this.props.box.geometry.name = (e.target as HTMLInputElement).value;\n\n            (e.target as HTMLInputElement).value = '';\n        }\n    }\n\n    sizeEnter(e: React.KeyboardEvent<HTMLInputElement>) {\n        if (e.key === 'Enter') {\n            let sizeVec = new THREE.Vector3(0, 0, 0);\n            this.props.box.geometry.computeBoundingBox();\n            this.props.box.geometry.boundingBox?.getSize(sizeVec);\n\n            const oldSize = sizeVec.x;\n            const newSize: number = parseInt((e.target as HTMLInputElement).value);\n            \n            const scaleValue = newSize/oldSize;\n\n            this.props.box.scale.x = scaleValue;\n            this.props.box.scale.y = scaleValue;\n            this.props.box.scale.z = scaleValue;\n\n            (e.target as HTMLInputElement).value = '';\n        }\n    }\n\n    colorEnter(e: React.KeyboardEvent<HTMLInputElement>) {\n        if (e.key === 'Enter') {\n            (this.props.box.material as THREE.MeshPhongMaterial).color = new THREE.Color((e.target as HTMLInputElement).value);\n            (e.target as HTMLInputElement).value = '';\n        }\n    }\n\n    render() {\n        let sizeVec = new THREE.Vector3(0, 0, 0);\n        this.props.box.geometry.computeBoundingBox();\n        this.props.box.geometry.boundingBox?.getSize(sizeVec);\n\n        let color = (this.props.box.material as THREE.MeshPhongMaterial).color;\n\n        return  <div className=\"popup\" style={{top: this.props.y, left: this.props.x}}>\n                    <span id=\"close\" onClick={this.exit}>x</span>\n\n                    <p style={{textAlign: \"center\"}}><strong>Info</strong></p>\n\n                    <label htmlFor=\"name\">\n                        Name: {this.props.box.geometry.name}\n                        <br />\n                        Enter new name: \n                    </label>\n                    <input id=\"name\" name=\"name\" type=\"text\" onKeyDown={this.nameEnter}/>\n\n                    <label htmlFor=\"size\">\n                        Size: {sizeVec.x}\n                        <br />\n                        Enter new size: \n                    </label>\n                    <input id=\"size\" name=\"size\" type=\"number\" onKeyDown={this.sizeEnter}/>\n\n                    <label htmlFor=\"color\">\n                        Color: {color.getHexString()}\n                        <br />\n                        Enter new color: \n                    </label>\n                    <input id=\"color\" color=\"name\" type=\"text\" onKeyDown={this.colorEnter}/>\n                </div>;\n    }\n}\n\nexport default Popup;","import { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"\n\nimport { Box } from \"./box\";\nimport { Plane } from \"./plane\";\nimport Popup from \"./popup\";\nimport { initCamera, initControls, initScene, intitRenderer } from \"./initialize\";\nimport './three-scene.css';\n\ntype sceneState = {\n  x2D: number,\n  y2D: number,\n  x3D: number,\n  y3D: number,\n  z3D: number,\n  box: THREE.Mesh\n}\n\nclass ThreeScene extends Component<{}, sceneState > {\n  private readonly BOX_SIZE = 70;\n  private mount: HTMLDivElement | null = null;\n\n  constructor(props: Object) {\n    super(props);\n\n    this.state = {\n      x2D: 0,\n      y2D: 0,\n      x3D: 0,\n      y3D: 0,\n      z3D: 0,\n      box: new THREE.Mesh()\n    };\n\n    this.setWindowListeners = this.setWindowListeners.bind(this);\n    this.onMouseClick = this.onMouseClick.bind(this);\n  }\n\n  componentDidMount() {\n     // Create a Scene\n     const scene = new THREE.Scene();\n     initScene(scene);\n \n     // Create Renderer\n     const renderer = new THREE.WebGLRenderer({ antialias: true });\n     intitRenderer(renderer);\n     this.mount!.appendChild(renderer.domElement);\n \n     // Create Camera\n     const camera = new THREE.PerspectiveCamera(60, window.innerWidth/window.innerHeight, 1, 1000);\n     initCamera(camera);\n \n     // Initialize Camera controls\n     const controls = new OrbitControls(camera, renderer.domElement);\n     initControls(controls);\n    \n    // Add floor to the Scene\n    const plane = new Plane();\n    plane.setPosition(0, -this.BOX_SIZE/2, 0);\n    plane.rotate(-Math.PI / 2);\n    scene.add(plane.getOriginalPlane);\n\n    // Draw three main cubes\n    for (let i = 0; i < 3; i ++) {\n      const box = new Box(this.BOX_SIZE);\n\n      const angle = (Math.PI * 2 / 3) * i;\n      const r = 150;\n      box.setPosition(r * Math.cos(angle), 0, r * Math.sin(angle));\n\n      scene.add(box.getOriginalBox);\n    }\n\n    function animate(thisObject: ThreeScene) {\n      requestAnimationFrame(function() {animate(thisObject);});\n  \n      controls.update();\n\n      const popup = document.querySelector('.popup') as HTMLDivElement;\n      if (popup.style.display === 'block') {\n        const canvas = renderer.domElement; \n        const vector = new THREE.Vector3(thisObject.state.x3D, thisObject.state.y3D, thisObject.state.z3D);\n        \n        vector.project(camera);\n\n        vector.x = Math.round((0.5 + vector.x / 2) * (canvas.width / window.devicePixelRatio));\n        vector.y = Math.round((0.5 - vector.y / 2) * (canvas.height / window.devicePixelRatio));\n\n        thisObject.setState(() => ({\n          x2D: vector.x,\n          y2D: vector.y\n        }));\n        \n      }\n\n        renderer.render(scene, camera);\n    };\n\n    this.setWindowListeners(camera, renderer, scene);\n    animate(this);\n  }\n\n  setWindowListeners(camera: THREE.PerspectiveCamera, renderer: THREE.WebGLRenderer,\n                     scene: THREE.Scene) {\n    const onWindowResize = function () {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n  \n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    window.addEventListener('resize', onWindowResize, false);\n\n    window.addEventListener('keydown', event => {\n      if (event.key === 'r') {\n        camera.position.set(400, 100, 0);\n      }\n    });\n\n    const canvas = renderer.domElement; \n    canvas.addEventListener('click', (event) => { this.onMouseClick(event, camera, scene, renderer)}, false);\n    canvas.addEventListener('touchstart', (event) => { this.onMouseClick(event, camera, scene, renderer)}, false);\n  }\n\n  onMouseClick(event: MouseEvent | TouchEvent, camera: THREE.PerspectiveCamera, \n               scene: THREE.Scene, renderer: THREE.WebGLRenderer) {\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n\n    const canvas = renderer.domElement; \n\n    // map to (-1, 1) interval\n    if (event instanceof MouseEvent) {\n      mouse.x = (event.clientX / canvas.width) * 2 - 1;\n      mouse.y = - (event.clientY / canvas.height) * 2 + 1;\n\n      raycaster.setFromCamera(mouse, camera);\n\n      mouse.x = Math.round((0.5 + mouse.x / 2) * (canvas.width / window.devicePixelRatio));\n      mouse.y = Math.round((0.5 - mouse.y / 2) * (canvas.height / window.devicePixelRatio));\n    } else {\n      mouse.x = ((event as TouchEvent).touches[0].clientX / window.innerWidth) * 2 - 1;\n      mouse.y = - ((event as TouchEvent).touches[0].clientY / window.innerHeight) * 2 + 1;\n\n      raycaster.setFromCamera(mouse, camera);\n\n      mouse.x = Math.round((0.5 + mouse.x / 2) * (window.innerWidth / window.devicePixelRatio));\n      mouse.y = Math.round((0.5 - mouse.y / 2) * (window.innerHeight / window.devicePixelRatio));\n    }\n    \n    const intersects = raycaster.intersectObjects(scene.children);\n  \n    if (intersects.length > 0) {\n      const mesh = intersects[0].object as THREE.Mesh;\n      const popup = document.querySelector('.popup') as HTMLDivElement;\n\n      if (mesh.geometry.type.includes('Box') && popup.style.display === 'none')\n      {\n        const position3D = intersects[0].point; \n        \n        this.setState(() => ({\n          x2D: mouse.x,\n          y2D: mouse.y,\n          x3D: position3D.x,\n          y3D: position3D.y,\n          z3D: position3D.z,\n          box: mesh\n        }));\n\n        popup.style.display = 'block';\n      } else {\n        popup.style.display = 'none';\n      }\n    }\n  }\n\n  render() {\n    const props = {\n      x: this.state.x2D,\n      y: this.state.y2D,\n      box: this.state.box\n    };\n\n    return  <div>\n              <div ref={ref => (this.mount = ref)} id=\"scene\">\n                <Popup {...props}/>\n              </div>\n            </div>;\n  }\n}\n\nexport default ThreeScene;\n","import * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nexport function initScene(scene: THREE.Scene) {\n    scene.background = new THREE.Color(0xcccccc);\n    scene.fog = new THREE.FogExp2(0xcccccc, 0.002);\n\n    // Add Lighting\n    const pointLight = new THREE.PointLight(0xffffff, 1, 0);\n    const ambientLight = new THREE.AmbientLight(0xffffff, 1);\n\n    pointLight.position.set(0, 1000, 0);\n    ambientLight.position.set(1000, 1000, 1000);\n\n    scene.add(pointLight);\n    scene.add(ambientLight);\n}\n\nexport function intitRenderer(renderer: THREE.WebGLRenderer) {\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0xcccccc, 1);\n}\n\nexport function initCamera(camera: THREE.PerspectiveCamera) {\n    camera.position.set(400, 100, 0);\n}\n\nexport function initControls(controls: OrbitControls) {\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.1;\n    controls.screenSpacePanning = false;\n    controls.minDistance = 100;\n    controls.maxDistance = 100;\n    controls.maxPolarAngle = Math.PI / 2;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport ThreeScene from './three-scene';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThreeScene />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}